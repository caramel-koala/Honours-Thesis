\section{Summary}
In this chapter the parallelised implementation of the cell merge algorithm was discussed. We began by discussing the Numba compiler and its ability to convert python code to CUDA kernels. We looked at how the data was restructured to be transferred to the GPU and how the transfer itself occurred. We discussed the parallel merge search, how CUDA threads were used to allow all centre to test with each of its neighbours simultaneously to produce the best merge possible. We saw that the best merge, once found, needed to be executed on both the host and on the GPU and how this was done was discussed. We lastly looked at how the GPU output differed from that of the sequential merge, and that this was most likely due to differences in floating point operation handling.